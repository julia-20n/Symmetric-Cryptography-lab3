from itertools import combinations
from collections import Counter

# Базові параметри
alphabet = "абвгдежзийклмнопрстуфхцчшщьыэюя"
m = len(alphabet)
modulus = m * m
char_to_index = {c: i for i, c in enumerate(alphabet)}
index_to_char = {i: c for i, c in enumerate(alphabet)}
forbidden_bigrams = {"аь", "оь", "ыь", "уь", "иь", "еь", "эь"}
common_letters = {'о', 'е', 'а', 'и', 'н', 'т'}
rare_letters = {'ф', 'щ', 'ь'}

# Допоміжні функції
def bigram_to_number(bigram):
    return char_to_index[bigram[0]] * m + char_to_index[bigram[1]]

def number_to_bigram(num):
    return index_to_char[num // m] + index_to_char[num % m]

def gcd_ext(a, b, extended=False):
    if b == 0:
        return (a, 1, 0) if extended else a
    g, x1, y1 = gcd_ext(b, a % b, extended=True)
    x, y = y1, x1 - (a // b) * y1
    return (g, x, y) if extended else g

def mod_inverse(a, m):
    g, x, _ = gcd_ext(a, m, extended=True)
    if g != 1:
        raise ValueError(f"Оберненого до {a} по модулю {m} не існує")
    return x % m

def solve_linear_congruence(a, b, m):
    g, x0, _ = gcd_ext(a, m, extended=True)
    if b % g != 0:
        raise ValueError(f"Рівняння {a}x ≡ {b} (mod {m}) не має розв’язків")
    x = (x0 * (b // g)) % m
    step = m // g
    solutions = [(x + i * step) % m for i in range(g)]
    return solutions

# Підбирач імовірних ключів
def find_affine_keys(plain_bigrams, cipher_bigrams):
    candidates = []
    for (X1_bi, X2_bi) in combinations(plain_bigrams, 2):
        X1 = bigram_to_number(X1_bi)
        X2 = bigram_to_number(X2_bi)
        delta_X = (X1 - X2) % modulus
        for (Y1_bi, Y2_bi) in combinations(cipher_bigrams, 2):
            Y1 = bigram_to_number(Y1_bi)
            Y2 = bigram_to_number(Y2_bi)
            delta_Y = (Y1 - Y2) % modulus
            try:
                a_solutions = solve_linear_congruence(delta_X, delta_Y, modulus)
                for a in a_solutions:
                    b = (Y1 - a * X1) % modulus
                    candidates.append((a, b))
            except ValueError:
                continue
    return candidates

# Розшифратор
def decrypt_affine_bigram(cipher_text, a, b):
    a_inv = mod_inverse(a, modulus)
    decrypted_text = ""
    for i in range(0, len(cipher_text) - 1, 2):
        pair = cipher_text[i:i+2]
        if all(c in char_to_index for c in pair):
            Y = bigram_to_number(pair)
            X = (a_inv * (Y - b)) % modulus
            decrypted_text += number_to_bigram(X)
    return decrypted_text

# Розпазнавіч мови
def is_meaningful(text, common_ratio_threshold=0.3, rare_ratio_threshold=0.1, relative_bigram_threshold=0.07):
    text = text.lower()
    letter_counts = Counter(c for c in text if c in alphabet)
    total_letters = sum(letter_counts.values())
    if total_letters == 0:
        return False
    common_count = sum(letter_counts[l] for l in common_letters)
    rare_count = sum(letter_counts[l] for l in rare_letters)
    common_ratio = common_count / total_letters
    rare_ratio = rare_count / total_letters
    bigrams = [text[i:i+2] for i in range(len(text)-1)]
    bigram_counts = Counter(bigrams)
    forbidden_found = any(b in bigram_counts for b in forbidden_bigrams)
    unique_bigrams = len(bigram_counts)
    return (
        common_ratio > common_ratio_threshold and
        rare_ratio < rare_ratio_threshold and
        not forbidden_found and
        unique_bigrams > len(text) * relative_bigram_threshold
    )

# Основна функція
def crack_affine(cipher_text, plain_bigrams, cipher_bigrams):
    candidates = find_affine_keys(plain_bigrams, cipher_bigrams)
    for a, b in candidates:
        try:
            decrypted = decrypt_affine_bigram(cipher_text, a, b)
            if is_meaningful(decrypted):
                return decrypted, a, b
        except Exception as e:
            continue
    print("Осмислений текст не знайдено")
    return None, None, None

cipher_text = "юетруожсвеызцэзыфшойызмбибсйкврбсйэффшщшвожкмчюетруожсвекзюегшшоакжжябсйцсвещтюсроауцезохюдбйэйаяэчэьогбйэжзмеьэнецеяэйгвекзсйютэфейцшгшимюетруожсвейбмомчьогбчуткаучзэзщмжзвзгефхмафыяэюэрелфауимчмгембуйвецщкэмоцыэбьекзмафыяэбьшемхдшчюфтчймеацжзвзгефхмафыяэюэрелфауимчмгелецшвимореиыфемэиоялшоуйфбяшмаокжыцзбкжжябсйцсвещтюсроауцезохюдбркшомэршйаябйолрхэдаючетжжгтифдзтшттфычсведаетсчлехввамчглмоцтябмчжзвзгефхмаллэзиоаущтюсроаучмэзршоюжеоэщедаюцюеютвючавэыфдшгегшчэмэдэдамчвенеттючмочажсвершоюжеоэщечмгецехйызребэлхывмыгеузызталлэффшщшьэвемаэфлшщтсэиеабзеьаллжсвелешжфехййэезбйютяшлфнекцршчмхвсйызвееосэткгйреткммвеуоцыэбьекзюсвершгеюкоюдбкзиэезнжцышоларемангмэяшбшашксййгшвозшашткшощсревкэбюсейчффыяэюэчкэбюсейчфокаагтсдвзбэхэвейюейюэббморенеозюбюсбрвеушйжфшьэаыфшойызмбибсйвйэффшщшвожкмчрещбдоуйюевебкэфлеишеьэщлэыфэфлшщшнеоюючялфеузхосйлхлецшвиффкшненрлечммэээиожкэщлэыфялфыфедаауййютциимайсмббщтюсрофгмэщтнвдаяферфанрршдедаважсимдэщбдоуйршюетруожсвечмдэшбяеимцщдшшдяэдашзццкэрзнэвччсфбсвьцавьцззюевеацмашоцыэбьечюдбмбуйвецщкэрзгшцйьоатчфцтсыэбчажкгзфлнэвдчаозглцтэенемхдшчюфтчйцэхекэсшворбфжаышолаякркмщбфпжвэщшфаюаяекйвеларбвйчфуйезсмонрквеацкэайчфуэкзхэнэаыжсючофббнвдабэуаллжсвеншеьллоюнпмощмнрюэцщдшайатэлллокозтшттфыфцкэрзнэьтжжгтибфбовууочэбмоткаувчсймебймещлаюцтьэаэчмнэаюффйшсмвчсверкзшыаакчмеиоеэдагтжкэфршофгшушвосдщтчьейледэамткьобрмыаакчгйршвзвшломоимцжатяфсчочшйгедйджцтцзцявдлечммэиыяэюэимялфыфшойызмбжщмйифршййюэббвчкчменэушдацшушбюэбеиючфцгбаюерючнрбэамткьояшщтюсровшбюэбеимомчвдааитдфйшмйээбйщклраадшмхреужлалрщтюсроуэнээшьмстевщтюсрощтнвдаяферфанркзщеоэкзмецешыозцшщбффсчйймчмысйвюеэщвроркэфэбхпимдэюебфзшзоюсвегосймэбйозиомойэплфеузхосйлхжйоюзабряеоэкзмецегегосчмышонвуудабэвшмхредаййцеууашоцнздабрбйюдатэлвдледыяффэуыяэюэюыфеыжцшдаййэфцтфэдиьшнрлечммэуаркаусшщтюсроаужзмейкжжкзюегшшойечфеймэбфсэцеайжзвзбэббгэааюзлхкзвзилцтэечйчфземхдшчюфтчймеиыфшойызмбтшмйдомчнпрбьояшфбройпрбьояшюшкфллынозбьхжткллокцыозэзюедажычайояфвеяэеомщббзпжцжюзшсшнэчмшоршвзжевшнээароуййцшюгэршвзжевшкюбвьцнеаэютуачучашйссимэкцыознэлехввакздаэбяккчмоьшцщдшэюдбоюдфцеаймшкзюегшшоуэцезоаоючллгечмчмлхйпрбжюаоцыэбьевоьеткгткэнйлафшаерзьэючаадажычафжяфйййцрорфрбрбкздажыванфауткмчршчмгечмцезоаозшсшнэчмбйейцтлзйааоиыхпрбябмысйициэлхкзпагтюсццжййцшюсахпрфауимршщегбоюхюзарахпмоючллгечмчмлхцезоошсшнэчмршчмгероютгльогбйэровюдбоюыыяэбьйемхдшчюфтчйменеюсофдарзсймеыюгшьэифябвкезгвфшровюдбоюшймчщвцтлзиоаумбуймэттсйхэйэршчмгечмлтьогцтйместрфэбмьйэмысйгшдерздивдоэеавагтдарзйэзыцтйэффлшневенемафыфеыжцшгелтьогцтйтцчтрфэбмьтщчаркюзгшвючжщвреаэогмэуыяэюэвоюсялшоючллгечмчмлхдаябоюзаеыяэюэимюаффлшдэшбшззвыыяэюэьйэфчзнэщблаллжсвечмщтсэюфеймэвемаоюдбсэббнвэфварбйошоюсвершчмгеййвбьсчарбйоаущтюсроаулечммэмзлечммэнвэбгооюдбсйэфцтфэлхнрвемхмеюевеацмазередеспречмгелецшвичавйевэбгохюдбвчфбнэшодбовууаафшщиййчемйцевдушгецшуштквдщцбйчфййцеялгтжжычуээарояфсйвецйвзчзюзецкэрзлхлшашюедесосдвееоаарксшжзюоеймемхмецшмепакчкожжывбфсйвежзкзвзчзсинэверыдбовууаюффлрлшашюедесосддшайчфбркзюегшшоуэябвкезгвозааббэфркаагтсдвзбэлшгежзвзгефхмаоюшйоюзаяшлецшвифбсйвэнэршлецшвифбсйяюдбчарксшузгещтсэюфэбйохкрксвуудабэвкчпденелехввацинвкшнедыкдщвюентвютщфбмышорюгтягвершщегбоюзавэкзушюевеацмащвервенемаоюдфэбдоцыэбьекзшзгшцйьоатваюдцщдшхейкаагтсджзвзгефхвзбэлшгелечммэвюдбуэшыэбршкзршоюжеоэщечмгеледыывмояшашксййгшвосдоюдайрвшмхдаюючжщвренеыжмевеммрйоюзаяшршщегбоюшйэфцтфэлхнрршоюжеоэщечмгемаоюсчфбнэшодбовууттакмдмевеммнюдбывуудабэвшмхкзэйфбуйэбюзщммевеммейютрбибффчжнэщтэфшзйамыжицэкздечмгемаоюоеьэлегбуйфбййвэшыэбьэлхюаофэбышоэьэеосдййэзчмыбовуужюдбмыяэцшдшимтгвеацашксййгшвосчменэушдацедйгегосдозщозеытжжимуыяэюэенваябыжпфййвеяэроеэпюйпмощбтеврэомобрршозоцлосдифгшьэоазшдараюдозоцлосйлхмевеммйчаоиышовчйшшсючаегшючшйызозючнрозоцлозеврэочаюгмэифгшьэифййвеяэчаючшоййызрешрмйеверкзэоцтжжычршеэршюетруоьшжздвзуушгецшьпффуащбэйвюаыэбфжшшмйэйцеаедеивердеданпмобрбфсэыбюсимцьрбууюсофдаэцуабйючсцбшдацедйцевчмазеучхпуалшфсуйюврбвавэнэршюврбвараркзшведшайчфяшрежзцймефешоюврбйшвшнеызявуудабэбгвелецшвиморерфыжцшдаимшчкчмочффшщшьэдаьоэфчанрршцеюфозмэсмдэдшэзуанрдедайрьэючййвеяэффмевефехеревчьшуоейцеаехозшцыфшдещтнврбморечжкзушьэьшдаквцшдагтшоэпыжьэюкчпдешсрбэфвкйпыжщхнэеолрмевеозлаючаегшейцеаехоисючаамбщсморшьшеэйацтейшэыэщовймэрэзолрферфлравщсрбэфвкршыжашгосэшыэбтруащтнвиэезвоошючхжркшонсрбэфвклещоварбйохпффуащбэйвюдосййцыэйюейлещоварбйосчгтлвяшмвердеданпмобрййвеяэуштквдоюбшушгецшуштквдэшгшайэфцткшвозуюедажыокршцеюфозмэдэдшайчфяшялсйэфчзюзифэффшщшьэочфбнэшомчсвуудабэивьцчэыбовууюейцнзуаййвеяэушткзшщоисмояшушпфыиейвечаушгецшюойеьяейчфморелбейуопьщсючтюэбеивчфбовьчяеьйшрвзйаючаемхкшмбуймэшовчьшуоывьцчэыбовуувшщеушбэхоьшщтнвфыфшдшгшвосйлхроеэпюйпредаякчпденеялфысйицекуйцтфьльетрфэфьцэшаеьхууцзюхейлхозкэдагтйэййвеяэлазшдаяюейлещоварбйолроюьзотзшрзбпыжщхушгецшушдарзбйщкаудэццведпыжьэцзфшгыэбфжшшмйеверлшвржзмеьцоэючщбэйцевдэшгшзоцыэбьевоейщеютдоважсвеючаюэбьшушбкллюзьэжцнхвшюшюхьлщвакжжябсйцсвеааршневзбэлшгефбровкркдысйгшхоючиэфхщшиэезгшацябвкезгвжожкллюзаегшвкрквшюшюхршюещбйпябвшлоеэпюйпимцжркшомчмевеммчжуйызмбибяшнедшайчфьрцеуофимойэлшвржзмшацжзвзгефхюебфзшацщтсэюфэблврбваквероюбшнедшэзщбээдагтйэвемащвэбгооюдбсйэфцтфэлхнрцщоэвзчзюзщфглябйййояфсйвеявервенемаоюфцкэрзлхатэлатэлуэюевзмеццледыывмобрщтюсроюецврбябййвймчййоюьщййэфчзнэсгмэдйоюзаяшташйссвчрбцэуыяэюэгверюаллщвбэсшьэээщбифауимакгтлжьоейоюцщдшьэвкшомэршйаябйоаухэдаючшэншеьллэбквможцшлткчусвбэсшьэрфауткдыьцхйтщщтнвщтролазшжзукжжябсййоцыэбьеццщблаллааэбякжсвечмдедаглццлхцегтзпморенедэозфбгюэфвэщтффнсжзлтьогцтйменевчюшозвеозвфауршледыяфдзэйозшыэбхпмояшщшнекзфеюзофгшушьэялозгвяещосйлхйыяэневембмочуьтуйжеымюещтглааэфгшьэжэюеютвюредаеыяэоюфшвшьэларквдомнелкаагтошчмокжыфбегмэозодщвшэщвфтузьэдияшюеушдаффатчждшршсвмыгеузмэушткяшюшфшнецемммевеммиыэфмлеркцлеттючмоьэмеююдбффнвмошйййитмоьэипрбьояшмвсймэсшьэхчьтуэмевеммуаэбякнцпжмбибйймчэбгюяшвеаэатэлаудагтшошэдэшбяеимдэшбяерейвьцчэуыяэюэюыщвдшэздивднрюеоэщшцяьшлецшвичавйэйоюзаяшледыяффэрйьэбкллюзледтрбйрхбоксэчзюзуаааушнешофыывйшвеьаллэбюсведрневшуайжючгшаавененэмаджуйсдйшмйвшгпмочеьаллэбюсвесцфэмйэйэббьючмааабпрбьшбсвецшвшнацрлшвшнеаавененэмасйвеняючофьэоцузмхюэтцжеушмйэйейлхялшоюсвершщтюсрояфлшюаааэбяксйэфчздшьэуаюдгйгебэгыяэмевеммрйэфцтдзуанрбйщкзшыэщомореьешльоюсеймееймэрэзозшлечммэеэвейюааьожкмевеммзовудшбсвещюгемечзюзуааавенемаокгшбсважзозюбнлйшмйээвеацюедесозшжцдшьарксшщтяфчарксшршщтяфжзцэвеютвюмоокдайрлэлфьэоцмевеммайжзсшбсвещюгемежыябзеьаллжсвеючыдаарбсйвйейлхялсэмазеучэбфбнроююакчызьпиыозбэршщтяфжцдшьаааеасйжзсшбсвекзюегшшоюекшшфщеткэцюевеацмазенжмдаарбюаллсэаавенеюечэясвеябвкезгвсжмдаарбялфыллжюрбжкркщтяфроиыозююлвуавейкветкчпуамаджяфябффдзэйифдэшбяеюылвэфюелкфыьокзцлгтпцчзэзаавенемафысйгшхочуозаеуожклветфбюехоьшюеббнвьэстжжцэыкьщбэдагтюсейцэрйоюзабряарккзамрзючошцшнэцэрбовййсащркбхксвэщлэмоуэщшрерзьэайоюзатщмевеммуарксшжзоркбхквчмоьшбйялсэщшфабфпжййезсмдйоюзаяшбкчпденвуудабэеэнкчпуяьшнрвчщтсэюфэбйосчщбэймчвдлшврбэдагтюсеймедйсмббмоиыфеыжцемхреьомдщвчанрбйшртэлебйючжедедэдагтйэяещтнврбмофыфшщфщсрегз"

plain_bigrams = ["ст", "но", "то", "на", "ен"]
cipher_bigrams = ["ве", "да", "эб", "ме", "мо"]

decrypted, a, b = crack_affine(cipher_text, plain_bigrams, cipher_bigrams)

if decrypted is not None:
    print(f"Ключ знайдено: a={a}, b={b}")
    print("Розшифрований текст:")
    print(decrypted)